sim
quantile(sim,.025)
quantile(sim,.975)
sim = rbinom(1000,200,69/200)
sim
quantile(sim,.025)
quantile(sim,.975)
sim = rbinom(1000,200,69/200)
sim
quantile(sim,.025)
quantile(sim,.975)
length(which(data<60))
115/200
sim = rbinom(1000,200,115/200)
quantile(sim,.025)
quantile(sim,.975)
?rbinom
mean = sum(data)/200
mean
lambdahat = 1/mean
lambdahat
?exp
?rexp
?rexp(200,lambdahat)
rexp(200,lambdahat)
sim = rexp(200,lambdahat)
quantile(sim,.025)
quantile(sim,.975)
1 - exp(-lambdahat*36)
?plot
x = seq(0,200,1)
plot(x,lambdahat*exp(-lambdahat*x))
hist(x,lambdahat*exp(-lambdahat*x))
plot(x,lambdahat*exp(-lambdahat*x))
1/lambdahat^2
1/(lambdahat^2)
lambdahat
1/(mean^2)
mean
1/199*(sum(data)-200*mean)
data
sum(data)
200*mean
1/199*(sum((data-mean)^2)
1/199*(sum((data-mean)^2))
1/(lambdahat^2)
1/lambdahat
sqrt(1/199*(sum((data-mean)^2)))
sqrt(3412.546)
mean = (0+1)/2
var = (1-0)^2/12
mean
var
runif(5)
sample = runif(5)
sample
z = sum(sample-mean)/sqrt(5*var^2)
z
sample = runif(50)
sample
z = sum(sample-mean)/sqrt(50*var^2)
z
mean = (0+1)/2
var = (1-0)^2/12
mean
var
sample = runif(5)
z = sum(sample-mean)/sqrt(5*var^2)
z
sample = runif(50)
z = sum(sample-mean)/sqrt(50*var^2)
z
sample = runif(500)
z = sum(sample-mean)/sqrt(500*var^2)
z
sample = runif(50)
z = sum(sample-mean)/sqrt(50*var^2)
z
sample = runif(50)
z = sum(sample-mean)/sqrt(50*var^2)
z
func(5)
mean = (0+1)/2
var = (1-0)^2/12
mean
var
func=function(n){
rs = rep(0,100)
for (i in 1:100) {
sample = runif(50)
z = sum(sample-mean)/sqrt(500*var^2)
rs[i]= z
}
rs
}
func(5)
plot(func(5))
hist(func(5))
hist(func(50))
hist(funct(500))
hist(func(500))
func=function(n){
rs = rep(0,100)
for (i in 1:100) {
sample = runif(n)
z = sum(sample-mean)/sqrt(n*var^2)
rs[i]= z
}
rs
}
hist(func(5))
hist(func(50))
hist(func(500))
hist(func(5))
m = (0+1)/2
v2 = (1-0)^2/12
m
v2
m = (0+1)/2
v2 = (1-0)^2/12
m
v2
func=function(n,m,v2){
rs = rep(0,100)
for (i in 1:100) {
sample = runif(n)
mean = sum(sample)/n
z = sqrt(n)*(mean-m)/sqrt(v2)
rs[i]= z
}
rs
}
hist(func(5,m,v2))
hist(func(50,m,v2))
hist(func(500,m,v2))
rs = rep(0,100)
for (i in 1:100) {
sample = runif(50)
mean = sum(sample)/50
z = sqrt(n)*(mean-m)/sqrt(v2)
rs[i]= z
}
rs = rep(0,100)
for (i in 1:100) {
sample = runif(50)
mean = sum(sample)/50
z = sqrt(50)*(mean-m)/sqrt(v2)
rs[i]= z
}
rs
hist(rs)
hist(func(5,m,v2))
hist(func(50,m,v2))
hist(func(500,m,v2))
func=function(n,m,v2){
rs = rep(0,1000)
for (i in 1:1000) {
sample = runif(n)
mean = sum(sample)/n
z = sqrt(n)*(mean-m)/sqrt(v2)
rs[i]= z
}
rs
}
hist(func(5,m,v2))
hist(func(50,m,v2))
hist(func(500,m,v2))
?dnorm
x = hist(func(5,m,v2))
x = func(5,m,v2)
v = seq(0,1000,1)
y = dnorm(v)
hist(y)
y = dnorm(v,0,1)
hist(y)
v = seq(-3,3,.1)
y = dnorm(v,0,1)
hist(y)
y = dnorm(v,0,1)
hist(y)
plot(y)
plot(y,col="red")
lines(y,x,col="green")
plot(y,col="red")
hist(x)
hist(y)
hist(x, prob=TRUE)
curve(y, add=TRUE)
y = dnorm(v,0,1)
hist(x, prob=TRUE)
curve(y, add=TRUE)
hist(x, prob=TRUE)
curve(y, add=TRUE)
plot(y)
curve(plot(y), add=TRUE)
plot(y,col="red")
lines(y,x,col="green")
hist(x, prob=TRUE)
lines(y,x,col="green")
lines(v,y,col="green")
x = func(5,m,v2)
v = seq(-3,3,.1)
y = dnorm(v,0,1)
lines(v,y,col="green")
hist(x, prob=TRUE)
lines(v,y,col="green")
lines(v,y,col="red")
v = seq(-3,3,.1)
y = dnorm(v)
hist(x, prob=TRUE)
lines(v,y,col="red")
par(mfrow = c(2,2))
data = scan("~/Dropbox/_UW/_12 Spring/STAT 391/STAT391_HW7/hw7mysteryfails.dat")
hist(data)
mean = sum(data)/200
mean
x = seq(0,200,1)
plot(x,lambdahat*exp(-lambdahat*x))
lambdahat = 1/mean
plot(x,lambdahat*exp(-lambdahat*x))
z = rep(0,1000)
for (i in 1:1000) {
v = rexp(200,lambdahat)
samplem = sum(v)/200
samplesd = sqrt(1/199*(sum((v-samplem)^2)))
z[i] = samplem/samplesd
}
hist(z)
logistic regression#
spambase <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase.data", header=F)#
attach(spambase)#
#access via spambase[row, column]#
#spambase[row] selects entire column#
#spambase[1, seq(1,58)] selects row 1#
mylogit <- glm(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1), #
  family = binomial(link = "logit"))#
summary(mylogit)#
confint(mylogit)#
exp(mylogit$coefficients)#
spambase_test <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase_test.data", header=F)#
spambase_test$V58 <-predict(mylogit, newdata = spambase_test, type="response")#
#play with threshold, original data has 1813 spam messages out of 4602 total#
#0.9 gives 1394, too strict#
spam_threshold = 0.9#
for(i in 1:4601) {#
  if(spambase_test[i,58] > spam_threshold) {#
    spambase_test[i,58] = 1#
  } else {#
    spambase_test[i,58] = 0#
  }#
}#
#write.table(spambase_test, file="spambase_test_result.data")#
#GAM#
library(mgcv)#
#gam1 = gam(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1),#
#       family=binomial)#
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
       family=binomial)#
summary(gam1)#
#compare logit with gam AIC, smaller df and smaller AIC better, AIC most important#
AIC(mylogit, gam1)#
#another comparison#
anova(mylogit, gam1, test="Chi")
logistic regression#
spambase <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase.data", header=F)#
attach(spambase)#
#access via spambase[row, column]#
#spambase[row] selects entire column#
#spambase[1, seq(1,58)] selects row 1#
mylogit <- glm(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1), #
  family = binomial(link = "logit"))#
summary(mylogit)#
#confint(mylogit)#
#exp(mylogit$coefficients)#
spambase_test <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase_test.data", header=F)#
spambase_test$V58 <-predict(mylogit, newdata = spambase_test, type="response")#
#play with threshold, original data has 1813 spam messages out of 4602 total#
#0.9 gives 1394, too strict#
spam_threshold = 0.9#
for(i in 1:4601) {#
  if(spambase_test[i,58] > spam_threshold) {#
    spambase_test[i,58] = 1#
  } else {#
    spambase_test[i,58] = 0#
  }#
}#
#write.table(spambase_test, file="spambase_test_result.data")#
#GAM#
library(mgcv)#
#gam1 = gam(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1),#
#       family=binomial)#
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
       family=binomial)#
summary(gam1)#
#compare logit with gam AIC, smaller df and smaller AIC better, AIC most important#
AIC(mylogit, gam1)#
#another comparison#
anova(mylogit, gam1, test="Chi")
logistic regression#
spambase <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase.data", header=F)#
attach(spambase)#
#access via spambase[row, column]#
#spambase[row] selects entire column#
#spambase[1, seq(1,58)] selects row 1#
mylogit <- glm(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1), #
  family = binomial(link = "logit"))#
summary(mylogit)#
#confint(mylogit)#
#exp(mylogit$coefficients)#
spambase_test <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase_test.data", header=F)#
spambase_test$V58 <-predict(mylogit, newdata = spambase_test, type="response")#
#play with threshold, original data has 1813 spam messages out of 4602 total#
#0.9 gives 1394, too strict#
spam_threshold = 0.9#
for(i in 1:4601) {#
  if(spambase_test[i,58] > spam_threshold) {#
    spambase_test[i,58] = 1#
  } else {#
    spambase_test[i,58] = 0#
  }#
}#
#write.table(spambase_test, file="spambase_test_result.data")#
#GAM#
library(mgcv)#
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
       family=binomial)#
summary(gam1)#
#compare logit with gam AIC, smaller df and smaller AIC better, AIC most important#
AIC(mylogit, gam1)#
#another comparison#
anova(mylogit, gam1, test="Chi")
install.packages("mgcv")#
library(mgcv)
logistic regression#
spambase <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase.data", header=F)#
attach(spambase)#
#access via spambase[row, column]#
#spambase[row] selects entire column#
#spambase[1, seq(1,58)] selects row 1#
mylogit <- glm(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1), #
  family = binomial(link = "logit"))#
summary(mylogit)#
#confint(mylogit)#
#exp(mylogit$coefficients)#
spambase_test <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase_test.data", header=F)#
spambase_test$V58 <-predict(mylogit, newdata = spambase_test, type="response")#
#play with threshold, original data has 1813 spam messages out of 4602 total#
#0.9 gives 1394, too strict#
spam_threshold = 0.9#
for(i in 1:4601) {#
  if(spambase_test[i,58] > spam_threshold) {#
    spambase_test[i,58] = 1#
  } else {#
    spambase_test[i,58] = 0#
  }#
}#
#write.table(spambase_test, file="spambase_test_result.data")#
#GAM#
install.packages("mgcv")#
library(mgcv)#
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
       family=binomial)#
summary(gam1)#
#compare logit with gam AIC, smaller df and smaller AIC better, AIC most important#
AIC(mylogit, gam1)#
#another comparison#
anova(mylogit, gam1, test="Chi")
summary(mylogit)
exp(mylogit$coefficients)
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
       family=binomial)
help(s)
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),#
log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),#
log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),#
log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),#
log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),#
log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),
family=binomial)
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),#
log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),#
log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),#
log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),#
log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),#
log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1), 5),#
       family=binomial)
s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),#
log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),#
log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),#
log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),#
log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),#
log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1), k = 5)
summary(gam1)
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),#
log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),#
log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),#
log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),#
log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),#
log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1), k = 5),#
       family=binomial)
help(gam)
logistic regression#
spambase <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase.data", header=F)#
attach(spambase)#
#access via spambase[row, column]#
#spambase[row] selects entire column#
#spambase[1, seq(1,58)] selects row 1#
mylogit <- glm(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1), #
  family = binomial(link = "logit"))#
summary(mylogit)#
#confint(mylogit)#
#exp(mylogit$coefficients)#
spambase_test <- read.table("~/Dropbox/_UW/_12 Spring/STAT 391/project/spambase_test.data", header=F)#
spambase_test$V58 <-predict(mylogit, newdata = spambase_test, type="response")#
#play with threshold, original data has 1813 spam messages out of 4602 total#
#0.9 gives 1394, too strict#
spam_threshold = 0.9#
for(i in 1:4601) {#
  if(spambase_test[i,58] > spam_threshold) {#
    spambase_test[i,58] = 1#
  } else {#
    spambase_test[i,58] = 0#
  }#
}#
#write.table(spambase_test, file="spambase_test_result.data")#
#GAM#
install.packages("mgcv")#
library(mgcv)#
#gam1 = gam(formula = V58 ~ log(V1+0.1)+log(V2+0.1)+log(V3+0.1)+log(V4+0.1)+log(V5+0.1)+log(V6+0.1)+log(V7+0.1)+log(V8+0.1)+log(V9+0.1)+log(V10+0.1)+log(V11+0.1)+log(V12+0.1)+log(V13+0.1)+log(V14+0.1)+log(V15+0.1)+log(V16+0.1)+log(V17+0.1)+log(V18+0.1)+log(V19+0.1)+log(V20+0.1)+log(V21+0.1)+log(V22+0.1)+log(V23+0.1)+log(V24+0.1)+log(V25+0.1)+log(V26+0.1)+log(V27+0.1)+log(V28+0.1)+log(V29+0.1)+log(V30+0.1)+log(V31+0.1)+log(V32+0.1)+log(V33+0.1)+log(V34+0.1)+log(V35+0.1)+log(V36+0.1)+log(V37+0.1)+log(V38+0.1)+log(V39+0.1)+log(V40+0.1)+log(V41+0.1)+log(V42+0.1)+log(V43+0.1)+log(V44+0.1)+log(V45+0.1)+log(V46+0.1)+log(V47+0.1)+log(V48+0.1)+log(V49+0.1)+log(V50+0.1)+log(V51+0.1)+log(V52+0.1)+log(V53+0.1)+log(V54+0.1)+log(V55+0.1)+log(V56+0.1)+log(V57+0.1),#
#       family=binomial)#
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
       family=binomial)#
summary(gam1)#
#compare logit with gam AIC, smaller df and smaller AIC better, AIC most important#
AIC(mylogit, gam1)#
#another comparison#
anova(mylogit, gam1, test="Chi")
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),#
log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),#
log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),#
log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),#
log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),#
log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
   	family=binomial)#
summary(gam1)#
#compare logit with gam AIC, smaller df and smaller AIC better, AIC most important#
AIC(mylogit, gam1)#
#another comparison#
anova(mylogit, gam1, test="Chi")
gam1 = gam(formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),#
log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),#
log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),#
log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),#
log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),#
log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1)),#
   	family=binomial)#
summary(gam1)#
#compare logit with gam AIC, smaller df and smaller AIC better, AIC most important#
AIC(mylogit, gam1)#
#another comparison#
anova(mylogit, gam1, test="Chi")
formula = V58 ~ s(log(V1+0.1),log(V2+0.1),log(V3+0.1),log(V4+0.1),log(V5+0.1),log(V6+0.1),log(V7+0.1),log(V8+0.1),log(V9+0.1),log(V10+0.1),#
log(V11+0.1),log(V12+0.1),log(V13+0.1),log(V14+0.1),log(V15+0.1),log(V16+0.1),log(V17+0.1),log(V18+0.1),log(V19+0.1),log(V20+0.1),#
log(V21+0.1),log(V22+0.1),log(V23+0.1),log(V24+0.1),log(V25+0.1),log(V26+0.1),log(V27+0.1),log(V28+0.1),log(V29+0.1),log(V30+0.1),#
log(V31+0.1),log(V32+0.1),log(V33+0.1),log(V34+0.1),log(V35+0.1),log(V36+0.1),log(V37+0.1),log(V38+0.1),log(V39+0.1),log(V40+0.1),#
log(V41+0.1),log(V42+0.1),log(V43+0.1),log(V44+0.1),log(V45+0.1),log(V46+0.1),log(V47+0.1),log(V48+0.1),log(V49+0.1),log(V50+0.1),#
log(V51+0.1),log(V52+0.1),log(V53+0.1),log(V54+0.1),log(V55+0.1),log(V56+0.1),log(V57+0.1))
gam1 = gam(formula, family=binomial)
formula
